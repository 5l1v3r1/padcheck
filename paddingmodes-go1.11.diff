diff -Burp go-go1.11/src/crypto/tls/common.go go-go1.11-patched-crypto/src/crypto/tls/common.go
--- go-go1.11/src/crypto/tls/common.go	2018-08-24 20:18:43.000000000 +0000
+++ go-go1.11-patched-crypto/src/crypto/tls/common.go	2019-03-08 15:36:00.650761371 +0000
@@ -498,6 +498,10 @@ type Config struct {
 	// be used.
 	CurvePreferences []CurveID
 
+	// PaddingMode indicates how the CBC pad function behaves.
+	// This is for the detection of padding oracles.
+	PaddingMode int
+
 	// DynamicRecordSizingDisabled disables adaptive sizing of TLS records.
 	// When true, the largest possible TLS record size is always used. When
 	// false, the size of TLS records may be adjusted in an attempt to
@@ -590,6 +594,7 @@ func (c *Config) Clone() *Config {
 		Renegotiation:               c.Renegotiation,
 		KeyLogWriter:                c.KeyLogWriter,
 		sessionTicketKeys:           sessionTicketKeys,
+		PaddingMode:                 c.PaddingMode,
 	}
 }
 
diff -Burp go-go1.11/src/crypto/tls/conn.go go-go1.11-patched-crypto/src/crypto/tls/conn.go
--- go-go1.11/src/crypto/tls/conn.go	2018-08-24 20:18:43.000000000 +0000
+++ go-go1.11-patched-crypto/src/crypto/tls/conn.go	2019-03-11 18:35:56.953388855 +0000
@@ -15,6 +15,8 @@ import (
 	"fmt"
 	"io"
 	"net"
+	"os" // for file output
+	"strings"
 	"sync"
 	"sync/atomic"
 	"time"
@@ -157,6 +159,9 @@ type halfConn struct {
 
 	// used to save allocating a new buffer for each MAC.
 	inDigestBuf, outDigestBuf []byte
+
+	// used for TLS padding tests
+	PaddingMode int
 }
 
 func (hc *halfConn) setErrorLocked(err error) error {
@@ -166,10 +171,11 @@ func (hc *halfConn) setErrorLocked(err e
 
 // prepareCipherSpec sets the encryption and MAC states
 // that a subsequent changeCipherSpec will use.
-func (hc *halfConn) prepareCipherSpec(version uint16, cipher interface{}, mac macFunction) {
+func (hc *halfConn) prepareCipherSpec(version uint16, cipher interface{}, mac macFunction, PaddingMode int) {
 	hc.version = version
 	hc.nextCipher = cipher
 	hc.nextMac = mac
+	hc.PaddingMode = PaddingMode
 }
 
 // changeCipherSpec changes the encryption and MAC states
@@ -375,20 +381,78 @@ func (hc *halfConn) decrypt(b *block) (o
 // block of payload. finalBlock is a fresh slice which contains the contents of
 // any suffix of payload as well as the needed padding to make finalBlock a
 // full block.
-func padToBlockSize(payload []byte, blockSize int) (prefix, finalBlock []byte) {
+func padToBlockSize(payload []byte, blockSize int, PaddingMode int) (prefix, finalBlock []byte) {
 	overrun := len(payload) % blockSize
 	paddingLen := blockSize - overrun
-	prefix = payload[:len(payload)-overrun]
-	finalBlock = make([]byte, blockSize)
-	copy(finalBlock, payload[len(payload)-overrun:])
-	for i := overrun; i < blockSize; i++ {
-		finalBlock[i] = byte(paddingLen - 1)
+	if PaddingMode == 5 {
+		macSplit := strings.SplitAfter(string(payload), "\r\n\r\n")
+		overrun = len(macSplit[1]) % blockSize
+		prefix = payload[0 : len(macSplit[1])-overrun]
+		paddingLen = blockSize - overrun
+		finalBlock = make([]byte, blockSize)
+		copy(finalBlock, payload[0:blockSize])
+	} else {
+		prefix = payload[:len(payload)-overrun]
+		finalBlock = make([]byte, blockSize)
+		copy(finalBlock, payload[len(payload)-overrun:])
+	}
+	if paddingLen == 1 && PaddingMode == 1 {
+		fmt.Printf("ERROR! Proper testing of PaddingMode 1 requires more padding bytes.\n")
+	}
+	// PaddingMode 0 is proper padding
+	// PaddingMode>10 are attack modes (handled s)
+	if PaddingMode == 0 || PaddingMode > 10 {
+		for i := overrun; i < blockSize; i++ {
+			finalBlock[i] = byte(paddingLen - 1)
+		}
+		// PaddingMode 1 correct (0-length) padding: Valid Pad + Invalid MAC
+		// The last block ends 0x00
+	} else if PaddingMode == 1 {
+		for i := overrun; i < blockSize-1; i++ {
+			finalBlock[i] = byte(i)
+		}
+		finalBlock[blockSize-1] = byte(0)
+		// PaddingMode 2: Incomplete (but correct) padding with no MAC
+		// All bytes are set to 0xff
+	} else if PaddingMode == 2 {
+		for i := 0; i < len(prefix); i++ {
+			prefix[i] = byte(255)
+		}
+		for i := overrun; i < blockSize; i++ {
+			finalBlock[i] = byte(255)
+		}
+		// PaddingMode 3 is SSLv3 compatible padding (POODLE): Invalid padding with correct MAC
+		// Correct pad length only
+	} else if PaddingMode == 3 {
+		for i := overrun; i < blockSize; i++ {
+			finalBlock[i] = byte(blockSize - i)
+		}
+		finalBlock[blockSize-1] = byte(paddingLen - 1)
+		// PaddingMode 4: Well-formed padding without any MAC or record body
+	} else if PaddingMode == 4 {
+		prefix = make([]byte, blockSize*5)
+		padLen := (blockSize * 6) - 1
+		for i := 0; i < blockSize*5; i++ {
+			prefix[i] = byte(padLen)
+		}
+		for i := 0; i < blockSize; i++ {
+			finalBlock[i] = byte(padLen)
+		}
+		// PaddingMode 5 has valid padding with an invalid MAC and a 0-length record
+		// See above for how the prefix was prepared to have the right byte count for a MAC
+		// This test case was added based on the research found here: https://github.com/RUB-NDS/TLS-Padding-Oracles
+	} else if PaddingMode == 5 {
+		for i := overrun; i < blockSize; i++ {
+			finalBlock[i] = byte(paddingLen - 1)
+		}
 	}
 	return
 }
 
 // encrypt encrypts and macs the data in b.
 func (hc *halfConn) encrypt(b *block, explicitIVLen int) (bool, alert) {
+	// Flag to indicate whether this looks like HTTP data and a broken padding mode was requested
+	isHTTP := false
 	// mac
 	if hc.mac != nil {
 		mac := hc.mac.MAC(hc.outDigestBuf, hc.seq[0:], b.data[:recordHeaderLen], b.data[recordHeaderLen+explicitIVLen:], nil)
@@ -397,6 +461,9 @@ func (hc *halfConn) encrypt(b *block, ex
 		b.resize(n + len(mac))
 		copy(b.data[n:], mac)
 		hc.outDigestBuf = mac
+		if bytes.Contains(b.data, []byte("HTTP")) {
+			isHTTP = true
+		}
 	}
 
 	payload := b.data[recordHeaderLen:]
@@ -428,10 +495,26 @@ func (hc *halfConn) encrypt(b *block, ex
 				c.SetIV(payload[:explicitIVLen])
 				payload = payload[explicitIVLen:]
 			}
-			prefix, finalBlock := padToBlockSize(payload, blockSize)
+			PaddingMode := 0
+			if isHTTP {
+				PaddingMode = hc.PaddingMode
+			}
+			prefix, finalBlock := padToBlockSize(payload, blockSize, PaddingMode)
 			b.resize(recordHeaderLen + explicitIVLen + len(prefix) + len(finalBlock))
 			c.CryptBlocks(b.data[recordHeaderLen+explicitIVLen:], prefix)
 			c.CryptBlocks(b.data[recordHeaderLen+explicitIVLen+len(prefix):], finalBlock)
+			// PaddingMode 30 is used for a simulated POODLE attack
+			if PaddingMode == 30 {
+				encrypted_blocks := b.data[5:]
+				target_block := encrypted_blocks[48:64]
+				copy(b.data[len(b.data)-16:], target_block)
+				os.Remove("/tmp/padcheck.data")
+				f, err_file := os.OpenFile("/tmp/padcheck.data", os.O_WRONLY|os.O_CREATE, 0600)
+				if err_file == nil {
+					f.Write(b.data)
+					f.Close()
+				}
+			}
 		default:
 			panic("unknown cipher type")
 		}
@@ -1067,7 +1150,8 @@ func (c *Conn) Write(b []byte) (int, err
 	// https://www.imperialviolet.org/2012/01/15/beastfollowup.html
 
 	var m int
-	if len(b) > 1 && c.vers <= VersionTLS10 {
+	// This behavior is undesirable when doing padding tests
+	if len(b) > 1 && c.vers <= VersionTLS10 && false {
 		if _, ok := c.out.cipher.(cipher.BlockMode); ok {
 			n, err := c.writeRecordLocked(recordTypeApplicationData, b[:1])
 			if err != nil {
Only in go-go1.11-patched-crypto/src/crypto/tls/: .conn.go.swp
diff -Burp go-go1.11/src/crypto/tls/handshake_client.go go-go1.11-patched-crypto/src/crypto/tls/handshake_client.go
--- go-go1.11/src/crypto/tls/handshake_client.go	2018-08-24 20:18:43.000000000 +0000
+++ go-go1.11-patched-crypto/src/crypto/tls/handshake_client.go	2019-03-08 15:36:00.650761371 +0000
@@ -538,8 +538,8 @@ func (hs *clientHandshakeState) establis
 		serverCipher = hs.suite.aead(serverKey, serverIV)
 	}
 
-	c.in.prepareCipherSpec(c.vers, serverCipher, serverHash)
-	c.out.prepareCipherSpec(c.vers, clientCipher, clientHash)
+	c.in.prepareCipherSpec(c.vers, serverCipher, serverHash, c.config.PaddingMode)
+	c.out.prepareCipherSpec(c.vers, clientCipher, clientHash, c.config.PaddingMode)
 	return nil
 }
 
diff -Burp go-go1.11/src/crypto/tls/handshake_server.go go-go1.11-patched-crypto/src/crypto/tls/handshake_server.go
--- go-go1.11/src/crypto/tls/handshake_server.go	2018-08-24 20:18:43.000000000 +0000
+++ go-go1.11-patched-crypto/src/crypto/tls/handshake_server.go	2019-03-08 15:36:00.650761371 +0000
@@ -562,8 +562,8 @@ func (hs *serverHandshakeState) establis
 		serverCipher = hs.suite.aead(serverKey, serverIV)
 	}
 
-	c.in.prepareCipherSpec(c.vers, clientCipher, clientHash)
-	c.out.prepareCipherSpec(c.vers, serverCipher, serverHash)
+	c.in.prepareCipherSpec(c.vers, clientCipher, clientHash, c.config.PaddingMode)
+	c.out.prepareCipherSpec(c.vers, serverCipher, serverHash, c.config.PaddingMode)
 
 	return nil
 }
